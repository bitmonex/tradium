//chart.js
import { createChartCore } from "./chart-core.js";
import { loadMoreCandles } from "./chart-data.js";

let chartCore = null;
let isLoading = false;
let noMoreData = false;
let loadTimer = null;

export async function initPixiChart(containerId, opts) {
  const container = document.getElementById(containerId);
  if (!container) throw new Error("Chart container not found");
  if (chartCore?.destroy) { chartCore.destroy(); chartCore = null; }
  chartCore = await createChartCore(container, {
    exchange: opts.exchange,
    marketType: opts.marketType,
    symbol: opts.symbol,
    timeframe: opts.timeframe,
    livePrice: opts.livePrice
  });
  window.chartCore = chartCore;

  // resize
  let resizeTimer;
  const onResize = () => {
    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      console.log("[resize] —Å–æ–±—ã—Ç–∏–µ —Ä–µ—Å–∞–π–∑–∞ –æ–∫–Ω–∞");
      chartCore.resize();
      loadHistoryChunk("resize");
      hideLoader(); // üëâ —É–±–∏—Ä–∞–µ–º –ª–æ–∞–¥–µ—Ä –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ
    }, 200);
  };
  window.addEventListener("resize", onResize);
  chartCore._onResize = onResize;

  return chartCore;
}

export async function startChartRender(tf) {
  const container = document.getElementById("chart-container");
  if (!container) return console.warn("‚ùå Chart container not found");
  const { exchange, marketType, symbol } = container.dataset;
  if (!exchange || !marketType || !symbol || !tf) return console.warn("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞");

  // üëâ –°–ë–†–û–° –§–õ–ê–ì–û–í –ø—Ä–∏ —Å–º–µ–Ω–µ –¢–§/—Å–∏–º–≤–æ–ª–∞
  noMoreData = false;
  isLoading = false;
  if (window.chartCore?.state) {
    window.chartCore.state.noMoreData = false;
  }
  hideLoader();

  if (window.chartCore?.destroy) {
    try {
      if (window.chartCore._onResize) window.removeEventListener('resize', window.chartCore._onResize);
      window.chartCore.destroy();
    } catch (e) { console.warn("[Chart] destroy error", e); }
    window.chartCore = null;
  }

  await initPixiChart("chart-container", { exchange, marketType, symbol, timeframe: tf, livePrice: true });
}

export async function loadHistoryChunk(trigger = "manual") {
  const core = window.chartCore;
  if (!core) return;

  clearTimeout(loadTimer);
  loadTimer = setTimeout(async () => {
    if (isLoading) {
      console.log(`[${trigger}] ‚ùå –ü—Ä–æ–ø—É—Å–∫: —É–∂–µ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞`);
      return;
    }
    if (noMoreData) {
      console.log(`[${trigger}] ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç`);
      showLoader("The End");
      return;
    }

    const { exchange, marketType, symbol, timeframe } = core.config;
    const candles = core.state.candles;
    if (!candles.length) return;

    console.log(`[${trigger}] üîé candles[0]=${new Date(candles[0].time).toISOString()}, candles[last]=${new Date(candles[candles.length - 1].time).toISOString()}`);

    let oldestMs = candles[0].time < candles[candles.length - 1].time
      ? candles[0].time
      : candles[candles.length - 1].time;

    const oldest = Math.floor(oldestMs / 1000);
    const oldestDate = new Date(oldestMs).toISOString();

    console.log(
      `[${trigger}] üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏. –¢–µ–∫—É—â–∏—Ö —Å–≤–µ—á–µ–π: ${candles.length}, `
      + `—Å—Ç–∞—Ä–µ–π—à–∞—è (s): ${oldest}, –¥–∞—Ç–∞: ${oldestDate}`
    );

    isLoading = true;
    showLoader("Loading...");

    try {
      const more = await loadMoreCandles(exchange, marketType, symbol, timeframe, oldest);

      if (more.length) {
        core.state.candles.unshift(...more);
        console.log(`[${trigger}] ‚úÖ –î–æ–≥—Ä—É–∂–µ–Ω–æ ${more.length}, –≤—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å: ${core.state.candles.length}`);
        core.scheduleRender({ full: true });
        hideLoader();
      } else {
        console.log(`[${trigger}] ‚ö†Ô∏è –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç`);
        noMoreData = true;
        core.state.noMoreData = true; 
        showLoader("The End");
      }
    } catch (err) {
      console.error(`[${trigger}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:`, err);
    } finally {
      isLoading = false;
      console.log(`[${trigger}] üîö –ó–∞–≤–µ—Ä—à–µ–Ω–æ, isLoading=${isLoading}`);
    }
  }, 300);
}

// --- UI –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞ / –∫–æ–Ω—Ü–∞ ---
function showLoader(text) {
  let loader = document.getElementById("chart-loader");
  if (!loader) {
    loader = document.createElement("div");
    loader.id = "chart-loader";
    loader.style.position = "absolute";
    loader.style.top = "10px";
    loader.style.left = "50%";
    loader.style.transform = "translateX(-50%)";
    loader.style.padding = "4px 8px";
    loader.style.background = "rgba(0,0,0,0.6)";
    loader.style.color = "#fff";
    loader.style.fontSize = "12px";
    loader.style.borderRadius = "4px";
    document.body.appendChild(loader);
  }
  loader.textContent = text;
  loader.style.display = "block";
}

function hideLoader() {
  const loader = document.getElementById("chart-loader");
  if (loader) loader.style.display = "none";
}
