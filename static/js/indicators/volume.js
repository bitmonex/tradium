// indicators/volume.js
export const volume = {
  meta: {
    id: 'volume',
    name: 'Volume',
    position: 'overlay',   // –ø–æ–≤–µ—Ä—Ö –≥—Ä–∞—Ñ–∏–∫–∞, –ø—Ä–∏–∂–∞—Ç –∫ –Ω–∏–∑—É plot
    zIndex: 20,
    params: {
      upColor: 0x00ff00,   // –∑–µ–ª—ë–Ω—ã–π
      downColor: 0xff3b3b  // –∫—Ä–∞—Å–Ω—ã–π
    },
    height: 80,           // –≤—ã—Å–æ—Ç–∞ –±–ª–æ–∫–∞ –æ–±—ä—ë–º–æ–≤
    autoheight: true       // –∞–≤—Ç–æ–ø–æ–¥–≥–æ–Ω –ø–æ –≤–∏–¥–∏–º—ã–º –±–∞—Ä–∞–º
  },

  createIndicator({ layer }) {
    const g = new PIXI.Graphics();
    g.zIndex = 20;
    g.visible = true;
    layer.sortableChildren = true;
    layer.addChild(g);

    // –∫—ç—à –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ autoheight
    let lastMaxVolVisible = 1;
    let lastCandlesKey = null; // üîπ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–º–µ–Ω—É –¥–∞–Ω–Ω—ã—Ö

    function render(layout) {
      const {
        candles,
        indexToX,
        plotH,
        candleWidth,
        scaleX,
        plotW
      } = layout;

      if (!candles?.length) return;

      // üîπ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –ø–æ –¥–∞–Ω–Ω—ã–º (–∫–æ–ª-–≤–æ + –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏)
      const candlesKey = `${candles.length}_${candles[0]?.time}_${candles[candles.length - 1]?.time}`;
      if (candlesKey !== lastCandlesKey) {
        // –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Üí —Å–±—Ä–æ—Å –∫—ç—à–∞ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç
        lastMaxVolVisible = 1;
        lastCandlesKey = candlesKey;
      }

      const { upColor, downColor } = volume.meta.params;
      const volH = volume.meta.height;
      const baseY = plotH - volH;
      const barWidth = candleWidth * scaleX;

      g.clear();

      let maxVol;
      if (volume.meta.autoheight) {
        let visibleMax = 0;
        for (let i = 0; i < candles.length; i++) {
          const xCenter = indexToX(i);
          const xLeft = xCenter - barWidth / 2;
          const xRight = xCenter + barWidth / 2;
          // –±–∞—Ä —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã–º, –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —ç–∫—Ä–∞–Ω [0, plotW]
          if (xRight >= 0 && xLeft <= plotW) {
            const v = candles[i].volume || 0;
            if (v > visibleMax) visibleMax = v;
          }
        }

        if (visibleMax > 0) {
          // –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –¥–∞–Ω–Ω—ã—Ö ‚Üí –±–µ—Ä—ë–º —Å—Ä–∞–∑—É –±–µ–∑ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
          if (lastMaxVolVisible === 1) {
            lastMaxVolVisible = visibleMax;
          } else {
            const alpha = 0.3; // —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ/–∑—É–º–µ
            lastMaxVolVisible =
              lastMaxVolVisible * (1 - alpha) + visibleMax * alpha;
          }
          maxVol = lastMaxVolVisible;
        } else {
          // –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –≤–∏–¥–∏–º–æ–≥–æ ‚Äî fallback –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
          maxVol = Math.max(...candles.map(c => c.volume || 0)) || 1;
        }
      } else {
        // –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        maxVol = Math.max(...candles.map(c => c.volume || 0)) || 1;
      }

      // —Ä–∏—Å—É–µ–º –±–∞—Ä—ã
      for (let i = 0; i < candles.length; i++) {
        const c = candles[i];
        const x = indexToX(i) - barWidth / 2;

        let h = (c.volume / maxVol) * volH;
        if (h > volH) h = volH;
        if (h < 0) h = 0;

        const y = baseY + (volH - h);
        const color = c.close >= c.open ? upColor : downColor;

        g.beginFill(color);
        g.drawRect(x, y, barWidth, h);
        g.endFill();
      }
    }

    return { render };
  }
};
